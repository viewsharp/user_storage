// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"user_server/gen/models"
)

// PostUserCreatedCode is the HTTP code returned for type PostUserCreated
const PostUserCreatedCode int = 201

/*PostUserCreated Success

swagger:response postUserCreated
*/
type PostUserCreated struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewPostUserCreated creates PostUserCreated with default headers values
func NewPostUserCreated() *PostUserCreated {

	return &PostUserCreated{}
}

// WithPayload adds the payload to the post user created response
func (o *PostUserCreated) WithPayload(payload *models.User) *PostUserCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user created response
func (o *PostUserCreated) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserBadRequestCode is the HTTP code returned for type PostUserBadRequest
const PostUserBadRequestCode int = 400

/*PostUserBadRequest Invalid format (the scheme depends on the implementation of the code generator)

swagger:response postUserBadRequest
*/
type PostUserBadRequest struct {
}

// NewPostUserBadRequest creates PostUserBadRequest with default headers values
func NewPostUserBadRequest() *PostUserBadRequest {

	return &PostUserBadRequest{}
}

// WriteResponse to the client
func (o *PostUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// PostUserUnprocessableEntityCode is the HTTP code returned for type PostUserUnprocessableEntity
const PostUserUnprocessableEntityCode int = 422

/*PostUserUnprocessableEntity Invalid format (the scheme depends on the implementation of the code generator)

swagger:response postUserUnprocessableEntity
*/
type PostUserUnprocessableEntity struct {
}

// NewPostUserUnprocessableEntity creates PostUserUnprocessableEntity with default headers values
func NewPostUserUnprocessableEntity() *PostUserUnprocessableEntity {

	return &PostUserUnprocessableEntity{}
}

// WriteResponse to the client
func (o *PostUserUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(422)
}

// PostUserInternalServerErrorCode is the HTTP code returned for type PostUserInternalServerError
const PostUserInternalServerErrorCode int = 500

/*PostUserInternalServerError Internal error

swagger:response postUserInternalServerError
*/
type PostUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostUserInternalServerError creates PostUserInternalServerError with default headers values
func NewPostUserInternalServerError() *PostUserInternalServerError {

	return &PostUserInternalServerError{}
}

// WithPayload adds the payload to the post user internal server error response
func (o *PostUserInternalServerError) WithPayload(payload *models.Error) *PostUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user internal server error response
func (o *PostUserInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
